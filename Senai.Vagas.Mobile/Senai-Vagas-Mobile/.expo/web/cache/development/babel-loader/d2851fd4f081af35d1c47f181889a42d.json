{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\senai\\\\Desktop\\\\Senai.Vagas.Mobile\\\\Senai-Vagas-Mobile\\\\src\\\\screens\\\\login\\\\Login.tsx\";\nimport React, { useState } from 'react';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport api from \"../../services/api\";\n\nvar getFonts = function getFonts() {\n  return Font.loadAsync({\n    'sansation-regular': require(\"../../assets/fonts/Sansation_Regular.ttf\")\n  });\n};\n\nexport default function Login() {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      senha = _useState4[0],\n      setSenha = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errorMessage = _useState8[0],\n      setErrorMessage = _useState8[1];\n\n  function saveUser(user) {\n    return _regeneratorRuntime.async(function saveUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem('@ListApp:userToken', JSON.stringify(user)));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function login() {\n    var credentials, response, user;\n    return _regeneratorRuntime.async(function login$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(email.length === 0)) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            setLoading(true);\n            _context2.prev = 3;\n            credentials = {\n              email: email,\n              password: senha\n            };\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(api.post('/login', credentials));\n\n          case 7:\n            response = _context2.sent;\n            user = response.data;\n            _context2.next = 11;\n            return _regeneratorRuntime.awrap(saveUser(user));\n\n          case 11:\n            setLoading(false);\n            _context2.next = 19;\n            break;\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.log(_context2.t0);\n            setLoading(false);\n            setErrorMessage('Usuário não existe');\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[3, 14]], Promise);\n  }\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      fontsLoaded = _useState10[0],\n      setFontsLoaded = _useState10[1];\n\n  if (fontsLoaded) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 8\n      }\n    }, React.createElement(Image, {\n      style: styles.logo,\n      source: require(\"../../assets/images/LogoAppVermelho.png\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 8\n      }\n    })), React.createElement(Text, {\n      style: styles.tlogin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, \"Fa\\xE7a seu login\"), React.createElement(Text, {\n      style: styles.ti,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, \"Email\"), React.createElement(TextInput, {\n      style: styles.input,\n      placeholder: \"\",\n      onChangeText: function onChangeText(e) {\n        return setEmail(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 10\n      }\n    }), React.createElement(Text, {\n      style: styles.ti,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 10\n      }\n    }, \"Senha\"), React.createElement(TextInput, {\n      style: styles.input,\n      secureTextEntry: true,\n      placeholder: \"\",\n      onChangeText: function onChangeText(e) {\n        return setSenha(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 10\n      }\n    }), React.createElement(TouchableOpacity, {\n      onPress: function onPress(event) {\n        event.preventDefault();\n        login();\n      },\n      style: styles.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 10\n      }\n    }, React.createElement(Text, {\n      style: styles.tloginnn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 12\n      }\n    }, \"Login\")), React.createElement(TouchableOpacity, {\n      style: styles.buttone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 10\n      }\n    }, React.createElement(Text, {\n      style: styles.tloginnn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 12\n      }\n    }, \"Esqueci minha senha\")), React.createElement(TouchableOpacity, {\n      style: styles.buttonc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 10\n      }\n    }, React.createElement(Text, {\n      style: styles.tloginn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 12\n      }\n    }, \"cadastrar como candidato\")), React.createElement(TouchableOpacity, {\n      style: styles.buttonc,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 10\n      }\n    }, React.createElement(Text, {\n      style: styles.tloginn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 12\n      }\n    }, \"cadastrar como empresa\")));\n  } else {\n    return React.createElement(AppLoading, {\n      startAsync: getFonts,\n      onFinish: function onFinish() {\n        return setFontsLoaded(true);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    });\n  }\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#FBFBFB',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 860\n  },\n  logo: {\n    width: 220,\n    height: 60\n  },\n  input: {\n    backgroundColor: '#FFFFFF',\n    margin: 10,\n    borderRadius: 15,\n    width: 200,\n    height: 35,\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowColor: 'black',\n    shadowOpacity: 0.3\n  },\n  button: {\n    backgroundColor: '#D20003',\n    margin: 10,\n    borderRadius: 15,\n    width: 200,\n    height: 35,\n    textAlign: \"center\",\n    justifyContent: 'center'\n  },\n  buttone: {\n    backgroundColor: '#016799',\n    margin: 10,\n    borderRadius: 15,\n    width: 200,\n    height: 35,\n    textAlign: \"center\",\n    justifyContent: 'center'\n  },\n  buttonc: {\n    backgroundColor: '#ffff',\n    margin: 10,\n    borderRadius: 15,\n    width: 150,\n    height: 35,\n    textAlign: \"center\",\n    justifyContent: 'center',\n    shadowOffset: {\n      width: 2,\n      height: 2\n    },\n    shadowColor: 'black',\n    shadowOpacity: 0.3,\n    fontSize: 12\n  },\n  tlogin: {\n    textDecorationColor: '#505050',\n    fontFamily: 'sansation-regular'\n  },\n  ti: {\n    marginRight: 150,\n    textDecorationColor: '#505050',\n    fontFamily: 'sansation-regular'\n  },\n  tloginn: {\n    color: '#016799',\n    fontFamily: 'sansation-regular'\n  },\n  tloginnn: {\n    fontFamily: 'sansation-regular',\n    color: '#E0E0E0'\n  }\n});","map":{"version":3,"sources":["C:/Users/senai/Desktop/Senai.Vagas.Mobile/Senai-Vagas-Mobile/src/screens/login/Login.tsx"],"names":["React","useState","Font","AppLoading","AsyncStorage","api","getFonts","loadAsync","require","Login","email","setEmail","senha","setSenha","loading","setLoading","errorMessage","setErrorMessage","saveUser","user","setItem","JSON","stringify","login","length","credentials","password","post","response","data","console","log","fontsLoaded","setFontsLoaded","styles","container","logo","tlogin","ti","input","e","event","preventDefault","button","tloginnn","buttone","buttonc","tloginn","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","height","width","margin","borderRadius","shadowOffset","shadowColor","shadowOpacity","textAlign","fontSize","textDecorationColor","fontFamily","marginRight","color"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, { useState } from 'react';\r\nimport * as Font from 'expo-font';\r\nimport {AppLoading} from 'expo';\r\nimport { StyleSheet, Text, View , Image, TextInput , TouchableOpacity, Alert} from 'react-native';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nimport { useHistory } from 'react-router-native';\r\nimport api from '../../services/api';\r\n\r\nconst getFonts = () => Font.loadAsync({\r\n  'sansation-regular': require('../../assets/fonts/Sansation_Regular.ttf')\r\n});\r\n\r\nexport default function Login() {\r\n\r\n  const [email, setEmail] = useState('')\r\n  const [senha, setSenha] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  async function saveUser(user) {\r\n    await AsyncStorage.setItem('@ListApp:userToken', JSON.stringify(user))\r\n  }\r\n\r\n  async function login() {\r\n    if (email.length === 0) return\r\n\r\n    setLoading(true)\r\n\r\n    try {\r\n\r\n      const credentials = {\r\n        email: email,\r\n        password: senha\r\n      }\r\n\r\n      const response = await api.post('/login', credentials)\r\n\r\n      const user = response.data\r\n\r\n      await saveUser(user)\r\n\r\n     \r\n\r\n      setLoading(false)\r\n\r\n     \r\n    } catch (err) {\r\n      console.log(err)\r\n\r\n      setLoading(false)\r\n      setErrorMessage('Usuário não existe')\r\n    }\r\n  }\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n\r\n\r\n    if (fontsLoaded) {\r\n      return (\r\n        <View style={styles.container}>\r\n       <View>\r\n       <Image \r\n         style={styles.logo}\r\n         source={require('../../assets/images/LogoAppVermelho.png')}\r\n         />\r\n       </View>\r\n        \r\n        <Text style={styles.tlogin}>Faça seu login</Text>\r\n        \r\n        <Text style={styles.ti}>Email</Text>\r\n         <TextInput\r\n         style={styles.input}\r\n         placeholder=\"\"\r\n         onChangeText={(e: any) => setEmail(e)}\r\n         />\r\n  \r\n         <Text style={styles.ti}>Senha</Text>\r\n         <TextInput\r\n         style={styles.input}\r\n         secureTextEntry={true}\r\n         placeholder=\"\"\r\n         onChangeText={(e: any) => setSenha(e)}\r\n         />\r\n   \r\n         <TouchableOpacity  onPress={event => {\r\n                        event.preventDefault();\r\n                        login();\r\n                    }} style={styles.button}>\r\n           <Text style={styles.tloginnn}>\r\n             Login\r\n           </Text>\r\n         </TouchableOpacity>\r\n   \r\n         <TouchableOpacity style={styles.buttone}>\r\n           <Text style={styles.tloginnn}>\r\n             Esqueci minha senha\r\n           </Text>\r\n         </TouchableOpacity>\r\n   \r\n         <TouchableOpacity style={styles.buttonc}>\r\n           <Text style={styles.tloginn}>\r\n             cadastrar como candidato\r\n           </Text>\r\n         </TouchableOpacity>\r\n   \r\n         <TouchableOpacity style={styles.buttonc}>\r\n           <Text style={styles.tloginn}>\r\n             cadastrar como empresa\r\n           </Text>\r\n         </TouchableOpacity>\r\n   \r\n       </View>\r\n     );\r\n   \r\n      \r\n    } else {\r\n      return (\r\n        <AppLoading \r\n          startAsync={getFonts} \r\n          onFinish={() => setFontsLoaded(true)} \r\n        />\r\n      )\r\n    }\r\n    \r\n  }\r\n  \r\n  const styles = StyleSheet.create({\r\n    container: {\r\n      flex: 1,\r\n      backgroundColor: '#FBFBFB',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      height: 860,\r\n      \r\n    },\r\n    \r\n    logo: {\r\n      width:220,\r\n      height: 60,\r\n     \r\n    },\r\n  \r\n    input: {\r\n      backgroundColor: '#FFFFFF',\r\n      margin: 10,\r\n      borderRadius: 15,\r\n      width: 200,\r\n      height:35,\r\n      shadowOffset:{  width: 2,  height: 2,  },\r\n      shadowColor: 'black',\r\n      shadowOpacity: 0.3,\r\n    },\r\n  \r\n    button: {\r\n      backgroundColor: '#D20003',\r\n      margin: 10,\r\n      borderRadius: 15,\r\n      width: 200,\r\n      height:35,\r\n      textAlign: \"center\",\r\n      justifyContent: 'center',\r\n      \r\n    },\r\n  \r\n    buttone: {\r\n      backgroundColor: '#016799',\r\n      margin: 10,\r\n      borderRadius: 15,\r\n      width: 200,\r\n      height:35,\r\n      textAlign: \"center\",\r\n      justifyContent: 'center',\r\n  \r\n    },\r\n  \r\n    buttonc: {\r\n      backgroundColor: '#ffff',\r\n      margin: 10,\r\n      borderRadius: 15,\r\n      width: 150,\r\n      height:35,\r\n      textAlign: \"center\",\r\n      justifyContent: 'center',\r\n      shadowOffset:{  width: 2,  height: 2,  },\r\n      shadowColor: 'black',\r\n      shadowOpacity: 0.3,\r\n      fontSize: 12\r\n      \r\n  \r\n    },\r\n  \r\n    tlogin: {\r\n      textDecorationColor: '#505050',\r\n      fontFamily: 'sansation-regular'\r\n    },\r\n  \r\n    ti:{\r\n      marginRight: 150,\r\n      textDecorationColor: '#505050',\r\n      fontFamily: 'sansation-regular'\r\n    },\r\n  \r\n    tloginn: {\r\n      color: '#016799',\r\n      fontFamily: 'sansation-regular'\r\n    },\r\n    tloginnn:{\r\n      fontFamily: 'sansation-regular',\r\n      color:'#E0E0E0'\r\n    }\r\n  });\r\n  \r\n"]},"metadata":{},"sourceType":"module"}