{"ast":null,"code":"function parseJwt(token) {\n  try {\n    if (token === null || token === undefined) return null;\n    var base64Url = token.split('.')[1];\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    console.log('ERROR in TokenDecoder: ' + error.message);\n    return null;\n  }\n}\n\nexport default parseJwt;","map":{"version":3,"sources":["C:/Users/senai/Desktop/Senai.Vagas.Mobile/Senai-Vagas-Mobile/src/services/tokenDecoder.tsx"],"names":["parseJwt","token","undefined","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","error","console","log","message"],"mappings":"AAKA,SAASA,QAAT,CAAkBC,KAAlB,EAA+C;AAC3C,MAAI;AAEA,QAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKC,SAAhC,EAA2C,OAAO,IAAP;AAE3C,QAAIC,SAAS,GAAGF,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAhB;AACA,QAAIC,MAAM,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,IAArC,EAA2C,GAA3C,CAAb;AACA,QAAIC,WAAW,GAAGC,kBAAkB,CAACC,IAAI,CAACJ,MAAD,CAAJ,CAAaD,KAAb,CAAmB,EAAnB,EAAuBM,GAAvB,CAA2B,UAAUC,CAAV,EAAa;AACzE,aAAO,MAAM,CAAC,OAAOA,CAAC,CAACC,UAAF,CAAa,CAAb,EAAgBC,QAAhB,CAAyB,EAAzB,CAAR,EAAsCC,KAAtC,CAA4C,CAAC,CAA7C,CAAb;AACH,KAFoC,EAElCC,IAFkC,CAE7B,EAF6B,CAAD,CAApC;AAIA,WAAOC,IAAI,CAACC,KAAL,CAAWV,WAAX,CAAP;AACH,GAXD,CAWE,OAAOW,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BF,KAAK,CAACG,OAA9C;AACA,WAAO,IAAP;AACH;AACJ;;AAED,eAAerB,QAAf","sourcesContent":["  \r\n// Objeto que será retornado pela função\r\nimport Token from '../interfaces/token';\r\n\r\n// Tipagem para o retorno da função, diz que irá retornar um 'Token' ou undefined\r\nfunction parseJwt(token: string): Token | null {\r\n    try {\r\n        // O TypeScript necessita que haja uma verificação caso token seja nulo\r\n        if (token === null || token === undefined) return null;\r\n\r\n        var base64Url = token.split('.')[1];\r\n        var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n        var jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\r\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(''));\r\n\r\n        return JSON.parse(jsonPayload);\r\n    } catch (error) {\r\n        console.log('ERROR in TokenDecoder: ' + error.message);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport default parseJwt;"]},"metadata":{},"sourceType":"module"}